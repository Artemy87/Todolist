{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","status","isInitialized","setAppInitializedAC","appReducer","Alert","props","elevation","variant","ErrorSnackbar","useSelector","app","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","auth","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","then","res","resultCode","catch","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","errors","type","FormControlLabel","control","Checkbox","checked","Button","color","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","map","todolistsReducer","removeTaskAC","tasks","addTaskAC","todoListId","updateTaskAC","t","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","task","find","apiModel","deadline","description","priority","startDate","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Delete","Todolist","demo","useEffect","thunk","todolist","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","TodolistsList","todolists","removeTaskTC","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","padding","spacing","allTodolistTasks","Paper","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCuDMC,EAMAC,E,2HAvENC,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDAPI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CASNC,EAAe,WAEpB,OAAON,EAASO,IAAoB,eAF/BD,EAAe,SAITE,GACX,OAAOR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KAL5EF,EAAe,SAOTI,GACX,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAe,SAUTI,EAAYF,GACvB,OAAOR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAXzDF,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KAjBlER,EAAe,SAmBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA6DI,EAA7D,UAAiF,CAACL,MAAOO,KApB3FT,EAAe,SAsBbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,IAYnFC,EAAU,SACbC,GACF,OAAOlB,EAASS,KAAsC,aAAcS,IAF/DD,EAAU,WAKf,OAAOjB,EAASW,OAAwC,eALnDM,EAAU,WAQf,OAAOjB,EAASO,IAA8D,a,SAgB1ET,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC3EL,IAAMoB,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAcL,EAAKG,SAAS,KAErCD,EAASG,EAAc,wBAE3BH,EAASI,EAAe,YAGfC,EAA2B,SAACC,EAA4BN,GACjEA,EAASG,EAAcG,EAAMC,QAAUD,EAAMC,QAAU,wBACvDP,EAASI,EAAe,Y,QCTtBI,EAAQC,YAAY,CACtBC,KAAM,OACNC,aAAc,CACVC,YAAY,GAEhBC,SAAU,CACNC,gBADM,SACUC,EAAOC,GAClBD,EAAMH,WAAaI,EAAOC,QAAQC,UAMlCC,EAAcX,EAAMY,QAGnBN,EAAmBN,EAAMa,QAAzBP,gBCXRN,EAAQC,YAAY,CACtBC,KAAM,MACNC,aAAc,CACVW,OAAQ,OACRhB,MAAO,KACPiB,eAAe,GAEnBV,SAAU,CACNW,oBAAqB,SAACT,EAAOC,GACzBD,EAAMQ,cAAgBP,EAAOC,QAAQM,eAEzCnB,eAAgB,SAACW,EAAOC,GACpBD,EAAMO,OAASN,EAAOC,SAE1Bd,cAAe,SAACY,EAAOC,GACnBD,EAAMT,MAAQU,EAAOC,YAKpBQ,EAAajB,EAAMY,Q,EACoCZ,EAAMa,QAA5DG,E,EAAAA,oBAAqBpB,E,EAAAA,eAAgBD,E,EAAAA,cCzBnD,SAASuB,EAAMC,GACX,OAAO,kBAAC,IAAD,eAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAGjD,SAASG,IACZ,IAAMxB,EAAQyB,aAA6C,SAAAhB,GAAK,OAAIA,EAAMiB,IAAI1B,SACxEN,EAAWiC,cAEXC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJpC,EAASG,EAAc,QAIrBkC,EAAmB,OAAV/B,EAEf,OACI,kBAACgC,EAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,GACrD,kBAAC,EAAD,CAAOO,QAASP,EAAaQ,SAAS,SACjCpC,I,gGCpBJqC,GAAQ,WACjB,IAAM3C,EAAWiC,cAEXrB,EAAamB,aAAuC,SAAAhB,GAAK,OAAIA,EAAM6B,KAAKhC,cAExEiC,EAASC,aAAU,CACrBC,SAAU,SAACC,GACP,OAAKA,EAAOC,MAKPD,EAAOE,cAAZ,EACW,CACHA,SAAU,wBANP,CACHD,MAAO,sBAUnBE,cAAe,CACXF,MAAO,GACPC,SAAU,GACVE,YAAY,GAEhBC,SAAU,SAAAL,GHPK,IAAClD,EGQZE,GHRYF,EGQKkD,EHRqB,SAAChD,GAC/CA,EAASI,EAAe,YACxBP,EAAcC,GACTwD,MAAK,SAAAC,GAC0B,IAAxBA,EAAIzD,KAAK0D,YACTxD,EAASc,EAAgB,CAACI,OAAO,KACjClB,EAASI,EAAe,eAExBL,EAAqBwD,EAAIzD,KAAME,MAGtCyD,OAAM,SAACnD,GACJD,EAAyBC,EAAON,YGAxC,OAAIY,EACO,kBAAC,IAAD,CAAU8C,GAAI,MAIlB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UAC3B,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,0BAAMV,SAAUR,EAAOmB,cACnB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,uDAC6B,uBAAGC,KAAM,wCACNC,OAAQ,UADX,SAG7B,sEAGA,yDAEA,8CAIJ,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,eACIC,MAAM,QACNC,OAAO,UACH3B,EAAO4B,cAAc,WAE5B5B,EAAO6B,OAAOzB,MAAQ,6BAAMJ,EAAO6B,OAAOzB,OAAe,KAC1D,kBAACqB,GAAA,EAAD,eACIK,KAAK,WACLJ,MAAM,WACNC,OAAO,UACH3B,EAAO4B,cAAc,cAE5B5B,EAAO6B,OAAOxB,SAAW,6BAAML,EAAO6B,OAAOxB,UAAkB,KAChE,kBAAC0B,GAAA,EAAD,CACIL,MAAO,cACPM,QAAS,kBAACC,GAAA,EAAD,iBACDjC,EAAO4B,cAAc,cADpB,CAELM,QAASlC,EAAOG,OAAOI,gBAG/B,kBAAC4B,EAAA,EAAD,CAAQL,KAAM,SAAU9C,QAAS,YAAaoD,MAAO,WAArD,eCzElBzE,GAAQC,YAAY,CACtBC,KAAM,YACNC,aAJ4C,GAK5CE,SAAU,CACNqE,iBAAkB,SAACnE,EAAOC,GAEtB,IAAMmE,EAAQpE,EAAMqE,WAAU,SAAAC,GAAE,OAAIA,EAAG/F,KAAO0B,EAAOC,WAClDkE,GAAS,GACRpE,EAAMuE,OAAOH,EAAO,IAG5BI,cAAe,SAACxE,EAAOC,GACnBD,EAAMyE,QAAN,2BAAkBxE,EAAOC,SAAzB,IAAkCwE,OAAQ,MAAOC,aAAc,WAEnEC,sBAAuB,SAAC5E,EAAOC,GAC3B,IAAMmE,EAAQpE,EAAMqE,WAAU,SAAAC,GAAE,OAAIA,EAAG/F,KAAO0B,EAAOC,QAAQ3B,MAC7DyB,EAAMoE,GAAO/F,MAAQ4B,EAAOC,QAAQ7B,OAExCwG,uBAAwB,SAAC7E,EAAOC,GAC5B,IAAMmE,EAAQpE,EAAMqE,WAAU,SAAAC,GAAE,OAAIA,EAAG/F,KAAO0B,EAAOC,QAAQ3B,MAC7DyB,EAAMoE,GAAOM,OAASzE,EAAOC,QAAQwE,QAEzCI,6BAA8B,SAAC9E,EAAOC,GAClC,IAAMmE,EAAQpE,EAAMqE,WAAU,SAAAC,GAAE,OAAIA,EAAG/F,KAAO0B,EAAOC,QAAQ3B,MAC7DyB,EAAMoE,GAAOO,aAAe1E,EAAOC,QAAQyE,cAE/CI,eAAgB,SAAC/E,EAAOC,GACpB,OAAOA,EAAOC,QAAQ8E,KAAI,SAAAV,GAAE,kCAASA,GAAT,IAAaI,OAAQ,MAAOC,aAAc,gBAKrEM,GAAmBxF,GAAMY,Q,GAQhBZ,GAAMa,QALxBsE,G,GAAAA,sBACAC,G,GAAAA,uBACAL,G,GAAAA,cACAL,G,GAAAA,iBACAW,G,GAAAA,6BACAC,G,GAAAA,eCzBEtF,GAAQC,YAAY,CACtBC,KAAM,QACNC,aAJiC,GAKjCE,SAAU,CACNoF,aAAc,SAAClF,EAAOC,GAClB,IAAMkF,EAAQnF,EAAMC,EAAOC,QAAQxB,YAC7B0F,EAAQe,EAAMd,WAAU,SAAAC,GAAE,OAAIA,EAAG/F,KAAO0B,EAAOC,QAAQvB,UACzDyF,GAAS,GACTe,EAAMZ,OAAOH,EAAO,IAG5BgB,UAAW,SAACpF,EAAOC,GACfD,EAAMC,EAAOC,QAAQmF,YAAYZ,QAAQxE,EAAOC,UAEpDoF,aAAc,SAACtF,EAAOC,GAClB,IAAMkF,EAAQnF,EAAMC,EAAOC,QAAQxB,YAC7B0F,EAAQe,EAAMd,WAAU,SAAAkB,GAAC,OAAIA,EAAEhH,KAAO0B,EAAOC,QAAQvB,UACvDyF,GAAS,IACTe,EAAMf,GAAN,2BAAmBe,EAAMf,IAAWnE,EAAOC,QAAQrB,SAI3D2G,WAAY,SAACxF,EAAOC,GAChBD,EAAMC,EAAOC,QAAQxB,YAAcuB,EAAOC,QAAQiF,QAG1DM,cAAe,SAACC,GACZA,EAAQC,QAAQnB,IAAe,SAACxE,EAAOC,GACnCD,EAAMC,EAAOC,QAAQ3B,IAAM,MAE/BmH,EAAQC,QAAQxB,IAAkB,SAACnE,EAAOC,UAC/BD,EAAMC,EAAOC,YAExBwF,EAAQC,QAAQZ,IAAgB,SAAC/E,EAAOC,GACpCA,EAAOC,QAAQ0F,SAAQ,SAACtB,GACpBtE,EAAMsE,EAAG/F,IAAM,YAOlBsH,GAAepG,GAAMY,Q,GAEiCZ,GAAMa,QAA3D4E,G,GAAAA,aAAcM,G,GAAAA,WAAYJ,G,GAAAA,UAAWE,G,GAAAA,aAkCtCQ,GAAe,SAACnH,EAAgBE,EAAkCH,GAAnD,OACxB,SAACO,EAAyB8G,GACtB,IACMC,EADQD,IACKZ,MAAMzG,GAAYuH,MAAK,SAAAV,GAAC,OAAIA,EAAEhH,KAAOI,KACxD,GAAKqH,EAAL,CAMA,IAAME,EAA6B,aAC/BC,SAAUH,EAAKG,SACfC,YAAaJ,EAAKI,YAClBC,SAAUL,EAAKK,SACfC,UAAWN,EAAKM,UAChBjI,MAAO2H,EAAK3H,MACZkC,OAAQyF,EAAKzF,QACV1B,GAGPV,EAAwBO,EAAYC,EAAQuH,GACvC3D,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAIzD,KAAK0D,WAAkB,CAC3B,IAAMxC,EAASqF,GAAa,CAAC3G,SAAQE,QAAOH,eAC5CO,EAASgB,QAETjB,EAAqBwD,EAAIzD,KAAME,MAGtCyD,OAAM,SAACnD,GACJD,EAAyBC,EAAON,WAxBpCsH,QAAQC,KAAK,iC,6BClGZC,GAAcC,IAAMC,MAAK,SAAS,GAAoD,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAC9FN,QAAQO,IAAI,sBADkF,MAGtEC,mBAAS,IAH6D,oBAGzF1I,EAHyF,KAGlF2I,EAHkF,OAItED,mBAAwB,MAJ8C,oBAIzFxH,EAJyF,KAIlF0H,EAJkF,KAMxFC,EAAiB,WACE,KAAjB7I,EAAM8I,QACNP,EAAQvI,GACR2I,EAAS,KAETC,EAAS,sBAiBjB,OAAO,6BACH,kBAAC1D,GAAA,EAAD,CAAWzC,QAAQ,WACR+F,SAAUA,EACVtH,QAASA,EACTY,MAAO9B,EACP+I,SAlBS,SAACC,GACrBL,EAASK,EAAEC,cAAcnH,QAkBdoH,WAfW,SAACF,GACT,OAAV9H,GACA0H,EAAS,MAEM,KAAfI,EAAEG,UACFN,KAWO1D,MAAM,QACNiE,WAAYlI,IAEvB,kBAACmI,EAAA,EAAD,CAAYxD,MAAM,UAAUyD,QAAST,EAAgBL,SAAUA,GAC3D,kBAACe,GAAA,EAAD,W,SCxCCC,GAAenB,IAAMC,MAAK,SAAU/F,GAC7C2F,QAAQO,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,oBAEtEe,EAFsE,KAE5DC,EAF4D,OAGnDhB,mBAASnG,EAAMT,OAHoC,oBAGtE9B,EAHsE,KAG/D2I,EAH+D,KAiB3E,OAAOc,EACE,kBAACvE,GAAA,EAAD,CAAWpD,MAAO9B,EAAO+I,SALd,SAACC,GACjBL,EAASK,EAAEC,cAAcnH,QAI4B6H,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZnH,EAAMwG,SAAS/I,MAQb,0BAAM6J,cAda,WACrBH,GAAY,GACZf,EAASpG,EAAMT,SAY2BS,EAAMT,U,UCd3CgI,GAAOzB,IAAMC,MAAK,SAAC/F,GAC5B,IAAMwH,EAAiBC,uBAAY,kBAAMzH,EAAM0H,WAAW1H,EAAMoF,KAAKzH,GAAIqC,EAAMlC,cAAa,CAACkC,EAAMoF,KAAKzH,GAAIqC,EAAMlC,aAE5G6J,EAAkBF,uBAAY,SAAChB,GACjC,IAAImB,EAAiBnB,EAAEC,cAActD,QACrCpD,EAAM6H,iBAAiB7H,EAAMoF,KAAKzH,GAAIiK,EAAiB7K,EAAa+K,UAAY/K,EAAagL,IAAK/H,EAAMlC,cACzG,CAACkC,EAAMoF,KAAKzH,GAAIqC,EAAMlC,aAEnBkK,EAAuBP,uBAAY,SAACQ,GACtCjI,EAAMkI,gBAAgBlI,EAAMoF,KAAKzH,GAAIsK,EAAUjI,EAAMlC,cACtD,CAACkC,EAAMoF,KAAKzH,GAAIqC,EAAMlC,aAEzB,OAAO,yBAAKqK,IAAKnI,EAAMoF,KAAKzH,GAAIyK,UAAWpI,EAAMoF,KAAKzF,SAAW5C,EAAa+K,UAAY,UAAY,IAClG,kBAAC3E,GAAA,EAAD,CACIC,QAASpD,EAAMoF,KAAKzF,SAAW5C,EAAa+K,UAC5CxE,MAAM,UACNkD,SAAUmB,IAGd,kBAACV,GAAD,CAAc1H,MAAOS,EAAMoF,KAAK3H,MAAO+I,SAAUwB,IACjD,kBAAClB,EAAA,EAAD,CAAYC,QAASS,GACjB,kBAACa,GAAA,EAAD,WCVCC,GAAWxC,IAAMC,MAAK,YAAgD,IAAD,IAApCwC,YAAoC,SAAnBvI,EAAmB,yBAC9E2F,QAAQO,IAAI,mBAEZ,IAAM7H,EAAWiC,cACjBkI,qBAAU,WACN,IAAID,EAAJ,CAGA,IJuCqBzK,EIvCf2K,GJuCe3K,EIvCMkC,EAAM0I,SAAS/K,GJuCE,SAACU,GACjDA,EAASI,EAAe,YACxBlB,EAAsBO,GACjB6D,MAAK,SAACC,GACH,IAAM2C,EAAQ3C,EAAIzD,KAAKwK,MACvBtK,EAASuG,GAAW,CAACL,QAAOzG,gBAC5BO,EAASI,EAAe,mBI5C5BJ,EAASoK,MACV,CAACF,EAAMvI,EAAM0I,SAAS/K,GAAIU,IAE7B,IAAMuK,EAAUnB,uBAAY,SAAChK,GACzBuC,EAAM4I,QAAQnL,EAAOuC,EAAM0I,SAAS/K,MACrC,CAACqC,EAAM4I,QAAS5I,EAAM0I,SAAS/K,KAK5BkL,EAAsBpB,uBAAY,SAAChK,GACrCuC,EAAM6I,oBAAoB7I,EAAM0I,SAAS/K,GAAIF,KAC9C,CAACuC,EAAM0I,SAAS/K,GAAIqC,EAAM6I,sBAEvBC,EAAoBrB,uBAAY,kBAAMzH,EAAM+I,aAAa,MAAO/I,EAAM0I,SAAS/K,MAAK,CAACqC,EAAM0I,SAAS/K,GAAIqC,EAAM+I,eAC9GC,EAAuBvB,uBAAY,kBAAMzH,EAAM+I,aAAa,SAAU/I,EAAM0I,SAAS/K,MAAK,CAACqC,EAAM0I,SAAS/K,GAAIqC,EAAM+I,eACpHE,EAA0BxB,uBAAY,kBAAMzH,EAAM+I,aAAa,YAAa/I,EAAM0I,SAAS/K,MAAK,CAACqC,EAAM0I,SAAS/K,GAAIqC,EAAM+I,eAG5HG,EAAmBlJ,EAAMuE,MAS7B,MAP8B,WAA1BvE,EAAM0I,SAAS5E,SACfoF,EAAmBlJ,EAAMuE,MAAMT,QAAO,SAAAa,GAAC,OAAIA,EAAEhF,SAAW5C,EAAagL,QAE3C,cAA1B/H,EAAM0I,SAAS5E,SACfoF,EAAmBlJ,EAAMuE,MAAMT,QAAO,SAAAa,GAAC,OAAIA,EAAEhF,SAAW5C,EAAa+K,cAGlE,6BACH,4BAAI,kBAACb,GAAD,CAAc1H,MAAOS,EAAM0I,SAASjL,MAAO+I,SAAUqC,IACrD,kBAAC/B,EAAA,EAAD,CAAYC,QAvBG,WACnB/G,EAAMmJ,eAAenJ,EAAM0I,SAAS/K,KAsBKsI,SAA0C,YAAhCjG,EAAM0I,SAAS3E,cAC1D,kBAACsE,GAAA,EAAD,QAGR,kBAACxC,GAAD,CAAaG,QAAS4C,EAAS3C,SAA0C,YAAhCjG,EAAM0I,SAAS3E,eACxD,6BAEQmF,EAAiB9E,KAAI,SAAAO,GAAC,OAAI,kBAAC4C,GAAD,CAAMY,IAAKxD,EAAEhH,GAAIyH,KAAMT,EAAG7G,WAAYkC,EAAM0I,SAAS/K,GAC/C+J,WAAY1H,EAAM0H,WAClBQ,gBAAiBlI,EAAMkI,gBACvBL,iBAAkB7H,EAAM6H,uBAIhE,yBAAKuB,MAAO,CAACC,WAAY,SACrB,kBAAChG,EAAA,EAAD,CAAQnD,QAAmC,QAA1BF,EAAM0I,SAAS5E,OAAmB,WAAa,OACxDiD,QAAS+B,EACTxF,MAAO,WAFf,OAKA,kBAACD,EAAA,EAAD,CAAQnD,QAAmC,WAA1BF,EAAM0I,SAAS5E,OAAsB,WAAa,OAC3DiD,QAASiC,EACT1F,MAAO,WAFf,UAIA,kBAACD,EAAA,EAAD,CAAQnD,QAAmC,cAA1BF,EAAM0I,SAAS5E,OAAyB,WAAa,OAC9DiD,QAASkC,EACT3F,MAAO,aAFf,kBChECgG,GAAqC,SAAC,GAAoB,IAAD,IAAlBf,YAAkB,SAC5DgB,EAAYnJ,aAAyD,SAAAhB,GAAK,OAAIA,EAAMmK,aACpFhF,EAAQnE,aAA8C,SAAAhB,GAAK,OAAIA,EAAMmF,SACrEtF,EAAamB,aAAuC,SAAAhB,GAAK,OAAIA,EAAM6B,KAAKhC,cAExEZ,EAAWiC,cAGjBkI,qBAAU,WACN,IAAID,GAAStJ,EAAb,CAGA,IAAMwJ,ENkBH,SAACpK,GACJA,EAASI,EAAe,YACxBlB,IACKoE,MAAK,SAACC,GACHvD,EAAS8F,GAAevC,EAAIzD,OAC5BE,EAASI,EAAe,iBAE3BqD,OAAM,SAAAnD,GACHD,EAAyBC,EAAON,OMzBxCA,EAASoK,MACV,IAGH,IAAMf,EAAaD,uBAAY,SAAU9J,EAAYG,GACjD,IAAM2K,ELuCc,SAAC1K,EAAgBD,GAAjB,OAAwC,SAACO,GACjEd,EAAwBO,EAAYC,GAC/B4D,MAAK,WACFtD,EAASiG,GAAa,CAACvG,SAAQD,oBK1CrB0L,CAAa7L,EAAIG,GAC/BO,EAASoK,KACV,IAEGG,EAAUnB,uBAAY,SAAUhK,EAAeK,GACjD,IAAM2K,ELwCW,SAAChL,EAAeK,GAAhB,OAAuC,SAACO,GAC7DA,EAASI,EAAe,YACxBlB,EAAwBO,EAAYL,GAC/BkE,MAAK,SAAAC,GAC0B,IAAxBA,EAAIzD,KAAK0D,YACTxD,EAASmG,GAAU5C,EAAIzD,KAAKA,KAAKgE,OACjC9D,EAASI,EAAe,eAExBL,EAAqBwD,EAAIzD,KAAME,MAGtCyD,OAAM,SAACnD,GACJD,EAAyBC,EAAON,OKpDtBoL,CAAUhM,EAAOK,GAC/BO,EAASoK,KACV,IAEGiB,EAAejC,uBAAY,SAAU9J,EAAYgC,EAAsB7B,GACzE,IAAM2K,EAAQvD,GAAavH,EAAI,CAACgC,UAAS7B,GACzCO,EAASoK,KACV,IAEGP,EAAkBT,uBAAY,SAAU9J,EAAYgM,EAAkB7L,GACxE,IAAM2K,EAAQvD,GAAavH,EAAI,CAACF,MAAOkM,GAAW7L,GAClDO,EAASoK,KACV,IAEGM,EAAetB,uBAAY,SAAUlI,EAAyBzB,GAChE,IAAMuB,EAAS4E,GAAuB,CAACtG,GAAIG,EAAYgG,OAAQvE,IAC/DlB,EAASgB,KACV,IAEG8J,EAAiB1B,uBAAY,SAAU9J,GACzC,INDyBG,EMCnB2K,GNDmB3K,EMCMH,ENA5B,SAACU,GAEJA,EAASI,EAAe,YAExBJ,EAAS6F,GAA6B,CAACvG,GAAIG,EAAYiG,aAAc,aACrExG,EAA4BO,GACvB6D,MAAK,WACFtD,EAASkF,GAAiBzF,IAE1BO,EAASI,EAAe,mBMRhCJ,EAASoK,KACV,IAEGI,EAAsBpB,uBAAY,SAAU9J,EAAYF,GAC1D,IAAMgL,ENkBuB,SAAC9K,EAAYF,GAC9C,OAAO,SAACY,GACJd,EAA4BI,EAAIF,GAC3BkE,MAAK,WACFtD,EAAS2F,GAAsB,CAACrG,KAAIF,eMtB9BmM,CAAsBjM,EAAIF,GACxCY,EAASoK,KACV,IAEGoB,EAAcpC,uBAAY,SAAChK,GAC7B,IAAMgL,ENGe,SAAChL,GAC1B,OAAO,SAACY,GACJA,EAASI,EAAe,YACxBlB,EAA4BE,GACvBkE,MAAK,SAACC,GACHvD,EAASuF,GAAchC,EAAIzD,KAAKA,KAAKgE,OACrC9D,EAASI,EAAe,kBMTlBqL,CAAcrM,GAC5BY,EAASoK,KACV,CAACpK,IAEJ,OAAKY,EAIE,oCACH,kBAAC+C,EAAA,EAAD,CAAMC,WAAS,EAACmH,MAAO,CAACW,QAAS,SAC7B,kBAAClE,GAAD,CAAaG,QAAS6D,KAE1B,kBAAC7H,EAAA,EAAD,CAAMC,WAAS,EAAC+H,QAAS,GAEjBT,EAAUnF,KAAI,SAAAV,GACV,IAAIuG,EAAmB1F,EAAMb,EAAG/F,IAEhC,OAAO,kBAACqE,EAAA,EAAD,CAAMG,MAAI,EAACgG,IAAKzE,EAAG/F,IACtB,kBAACuM,GAAA,EAAD,CAAOd,MAAO,CAACW,QAAS,SACpB,kBAACzB,GAAD,CACII,SAAUhF,EACVa,MAAO0F,EACPvC,WAAYA,EACZqB,aAAcA,EACdH,QAASA,EACTf,iBAAkB6B,EAClBP,eAAgBA,EAChBjB,gBAAiBA,EACjBW,oBAAqBA,EACrBN,KAAMA,WAxBvB,kBAAC,IAAD,CAAUxG,GAAI,YCTdoI,OA9Cf,YAAyC,IAAD,IAA1B5B,YAA0B,SAC9B5I,EAASS,aAAsC,SAAAhB,GAAK,OAAIA,EAAMiB,IAAIV,UAClEC,EAAgBQ,aAAuC,SAAChB,GAAD,OAAWA,EAAMiB,IAAIT,iBAC5EX,EAAamB,aAAuC,SAAAhB,GAAK,OAAIA,EAAM6B,KAAKhC,cACxEZ,EAAWiC,cAEjBkI,qBAAU,WACNnK,GVE6B,SAACA,GAClCH,IAAayD,MAAK,SAAAC,GACc,IAAxBA,EAAIzD,KAAK0D,YACTxD,EAASc,EAAgB,CAACI,OAAO,KAIrClB,EAASwB,EAAoB,CAACD,eAAe,aUR9C,CAACvB,IAEJ,IAAM+L,EAAgB3C,uBAAY,WAC9BpJ,GXGsB,SAACA,GAC3BA,EAASI,EAAe,YACxBP,IACKyD,MAAK,SAAAC,GAC0B,IAAxBA,EAAIzD,KAAK0D,YACTxD,EAASc,EAAgB,CAACI,OAAO,KACjClB,EAASI,EAAe,eAExBL,EAAqBwD,EAAIzD,KAAME,MAGtCyD,OAAM,SAACnD,GACJD,EAAyBC,EAAON,WWdrC,CAACA,IAEJ,OAAKuB,EAQD,kBAAC,IAAD,KACI,yBAAKwI,UAAU,OACX,kBAACjI,EAAD,MACA,kBAACkK,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACzD,EAAA,EAAD,CAAY0D,KAAK,QAAQlH,MAAM,UAAUmH,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYzK,QAAQ,MAApB,QAGCjB,GAAc,kBAACoE,EAAA,EAAD,CAAQC,MAAM,UAAUyD,QAASqD,GAAjC,YAEP,YAAXzK,GAAwB,kBAACiL,EAAA,EAAD,OAE7B,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,kBAAC,GAAD,CAAe1C,KAAMA,OAC3D,kBAAC,IAAD,CAAOyC,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,GAAD,YAxB1C,yBACH7B,MAAO,CAACkB,SAAU,QAASY,IAAK,MAAOC,UAAW,SAAUC,MAAO,SACnE,kBAACC,EAAA,EAAD,Q,kBCjCNC,GAAcC,aAAgB,CAChChH,MAAOU,GACPsE,UAAWlF,GACXhE,IAAKP,EACLmB,KAAMzB,IAIGgM,GAAQC,YAAe,CAChChM,QAAS6L,GACTI,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,SAOvElP,OAAO6O,MAAQA,GCnBfM,IAASb,OACL,kBAAC,IAAD,CAAUO,MAAOA,IACb,kBAAC,GAAD,OACSO,SAASC,eAAe,ShBgInC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxK,MAAK,SAAAyK,GACJA,EAAaC,gBAEdvK,OAAM,SAAAnD,GACLgH,QAAQhH,MAAMA,EAAMC,c","file":"static/js/main.d1a7f901.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '57c8177e-0cc1-45bd-9287-f4d1570cbc36'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n             state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\n// reducer\r\nexport const authReducer = slice.reducer;\r\n\r\n//actions\r\nexport const {setIsLoggedInAC} = slice.actions;\r\n\r\n// thunkCreators\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type InitialStateType = {\r\n    status: string\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null as null | string,\r\n        isInitialized: false\r\n    },\r\n    reducers: {\r\n        setAppInitializedAC: (state, action: PayloadAction<{isInitialized: boolean}>) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n        setAppStatusAC: (state, action: PayloadAction<RequestStatusType>) => {\r\n            state.status = action.payload\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<string | null>) => {\r\n            state.error = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppInitializedAC, setAppStatusAC, setAppErrorAC} = slice.actions;\r\n\r\n//thunkCreators\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n\r\n        }\r\n        dispatch(setAppInitializedAC({isInitialized: true}));\r\n    })\r\n}\r\n\r\n//type\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickAway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        removeTodolistAC: (state, action: PayloadAction<string>) => {\r\n            // state.filter(tl => tl.id !== action.payload.id)\r\n            const index = state.findIndex(tl => tl.id === action.payload);\r\n            if(index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodolistAC: (state, action: PayloadAction<TodolistType>) => {\r\n            state.unshift({...action.payload, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC: (state, action: PayloadAction<{id: string, title: string}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        },\r\n        changeTodolistFilterAC: (state, action: PayloadAction<{id: string, filter: FilterValuesType}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{id: string, entityStatus: RequestStatusType}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.entityStatus;\r\n        },\r\n        setTodolistsAC: (state, action: PayloadAction<TodolistType[]>) => {\r\n            return action.payload.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\n// action creators\r\nexport const {\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC} = slice.actions;\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodolistTitleAC({id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    AddTodolistActionType,\r\n    removeTodolistAC,\r\n    RemoveTodolistActionType,\r\n    setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks.splice(index, 1);\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<TaskType>) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n            // state[action.payload.todolistId].map(tl => tl.id === action.payload.taskId ? {...tl, ...action.payload.model} : tl)\r\n        },\r\n        setTasksAC: (state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.id] = [];\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload];\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer;\r\n// action creators\r\nexport const {removeTaskAC, setTasksAC, addTaskAC, updateTaskAC} = slice.actions;\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            dispatch(removeTaskAC({taskId, todolistId}))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [demo, props.todolist.id, dispatch])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC} from './app-reducer'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}